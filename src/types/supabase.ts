
// This file can be auto-generated by Supabase CLI:
// supabase gen types typescript --project-id <your-project-id> --schema public > src/types/supabase.ts
// For now, we define a basic structure.

export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      tests: {
        Row: {
          id: string
          title: string
          description: string
          isPublished: boolean
          created_at: string | null
        }
        Insert: {
          id?: string
          title: string
          description: string
          isPublished?: boolean
          created_at?: string | null
        }
        Update: {
          id?: string
          title?: string
          description?: string
          isPublished?: boolean
          created_at?: string | null
        }
        Relationships: []
      }
      questions: {
        Row: {
          id: string
          test_id: string
          text: string
          type: string
          options: Json | null // Corresponds to QuestionOption[]
          scale_min: number | null
          scale_max: number | null
          min_label: string | null
          max_label: string | null
          order: number
          created_at: string | null
        }
        Insert: {
          id?: string
          test_id: string
          text: string
          type: string
          options?: Json | null
          scale_min?: number | null
          scale_max?: number | null
          min_label?: string | null
          max_label?: string | null
          order: number
          created_at?: string | null
        }
        Update: {
          id?: string
          test_id?: string
          text?: string
          type?: string
          options?: Json | null
          scale_min?: number | null
          scale_max?: number | null
          min_label?: string | null
          max_label?: string | null
          order?: number
          created_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "questions_test_id_fkey"
            columns: ["test_id"]
            referencedRelation: "tests"
            referencedColumns: ["id"]
          }
        ]
      }
      submissions: {
        Row: {
          id: string
          test_id: string
          full_name: string
          email: string // Added email
          answers: Json | null // Corresponds to UserAnswer[]
          time_taken: number
          submitted_at: string
          analysis_status: string
          psychological_traits: string | null
          ai_error: string | null
          manual_analysis_notes: string | null
          created_at: string | null
        }
        Insert: {
          id?: string
          test_id: string
          full_name: string
          email: string // Added email
          answers?: Json | null
          time_taken: number
          submitted_at?: string
          analysis_status: string
          psychological_traits?: string | null
          ai_error?: string | null
          manual_analysis_notes?: string | null
          created_at?: string | null
        }
        Update: {
          id?: string
          test_id?: string
          full_name?: string
          email?: string // Added email
          answers?: Json | null
          time_taken?: number
          submitted_at?: string
          analysis_status?: string
          psychological_traits?: string | null
          ai_error?: string | null
          manual_analysis_notes?: string | null
          created_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "submissions_test_id_fkey"
            columns: ["test_id"]
            referencedRelation: "tests"
            referencedColumns: ["id"]
          }
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      [_ in never]: never
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

